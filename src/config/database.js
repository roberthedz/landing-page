const mongoose = require('mongoose');

// Configuraci√≥n de MongoDB Atlas
const connectDB = async () => {
  try {
    // URL de conexi√≥n directa a MongoDB Atlas
    const mongoUri = 'mongodb+srv://rhzamora144:86e6FbGM00uV78RP@cluster0.4vwcokw.mongodb.net/reservas?retryWrites=true&w=majority&appName=Cluster0';
    
    console.log('üîó Conectando a MongoDB Atlas...');
    
    // Conectar a MongoDB Atlas
    await mongoose.connect(mongoUri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000, // Timeout despu√©s de 5s en lugar de 30s
      socketTimeoutMS: 45000, // Cerrar sockets despu√©s de 45s de inactividad
      maxPoolSize: 10, // Mantener hasta 10 conexiones de socket
      serverSelectionTimeoutMS: 5000, // Timeout de selecci√≥n de servidor
      socketTimeoutMS: 45000, // Timeout de socket
      family: 4 // Usar IPv4, omitir IPv6
    });
    
    console.log('‚úÖ Conectado a MongoDB Atlas exitosamente');
    
    // Manejar eventos de conexi√≥n
    mongoose.connection.on('connected', () => {
      console.log('üü¢ Mongoose conectado a MongoDB Atlas');
    });
    
    mongoose.connection.on('error', (err) => {
      console.error('‚ùå Error de conexi√≥n MongoDB:', err);
    });
    
    mongoose.connection.on('disconnected', () => {
      console.log('üî¥ Mongoose desconectado de MongoDB Atlas');
    });
    
    return mongoose.connection;
  } catch (error) {
    console.error('‚ùå Error al conectar a MongoDB Atlas:', error.message);
    process.exit(1);
  }
};

// Funci√≥n para desconectar de MongoDB
const disconnectDB = async () => {
  try {
    await mongoose.connection.close();
    console.log('üî¥ Desconectado de MongoDB Atlas');
  } catch (error) {
    console.error('‚ùå Error al desconectar de MongoDB:', error);
  }
};

module.exports = { connectDB, disconnectDB }; 